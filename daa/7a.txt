#include<bits/stdc++.h>
using namespace std;
using namespace chrono;

struct G {
    int V; vector<vector<int>> a;
    G(int V):V(V),a(V){}
    void add(int u,int v){a[u].push_back(v);}
    void dfs(int v,vector<bool>& vis,stack<int>& s){
        vis[v]=1;
        for(int n:a[v])if(!vis[n])dfs(n,vis,s);
        s.push(v);
    }
    void topoDFS(){
        vector<bool> vis(V); stack<int> s;
        for(int i=0;i<V;i++)if(!vis[i])dfs(i,vis,s);
        while(!s.empty())cout<<s.top()<<" ",s.pop(); cout<<endl;
    }
    void topoKahn(){
        vector<int> in(V); for(int u=0;u<V;u++)for(int v:a[u])in[v]++;
        queue<int> q; for(int i=0;i<V;i++)if(!in[i])q.push(i);
        while(!q.empty()){
            int u=q.front(); q.pop(); cout<<u<<" ";
            for(int v:a[u])if(--in[v]==0)q.push(v);
        } cout<<endl;
    }
};

int main(){
    G g(6);
    g.add(5,2);g.add(5,0);g.add(4,0);g.add(4,1);g.add(2,3);g.add(3,1);
    auto d1=high_resolution_clock::now(); g.topoDFS();
    auto d2=high_resolution_clock::now(); cout<<"DFS: "<<duration_cast<nanoseconds>(d2-d1).count()<<" ns\n";
    auto k1=high_resolution_clock::now(); g.topoKahn();
    auto k2=high_resolution_clock::now(); cout<<"Kahn: "<<duration_cast<nanoseconds>(k2-k1).count()<<" ns\n";
}
